

/* 函数实现部分，{ }内的东西可以任意调整，目前的return 0只是一个示例，可改变 */

/* 不允许定义任何形式的外部全局、静态全局、宏定义、只读变量 */

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (str[i] != '\0') {
        i++;
    }

    return i; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcat(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    int num_1 = tj_strlen(s1);
    int num_2 = tj_strlen(s2);

    for (int i = 0; i < num_2; i++) {
        s1[num_1 + i] = s2[i];
    }

    s1[num_1 + num_2] = '\0';

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncat(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int num_1 = tj_strlen(s1);
    int num_2 = tj_strlen(s2);

    int my_len = len < num_2 ? len : num_2;

    for (int i = 0; i < my_len; i++) {
        s1[num_1 + i] = s2[i];
    }

    s1[num_1 + my_len] = '\0';

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcpy(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int num_2 = tj_strlen(s2);

    for (int i = 0; i < num_2 + 1; i++) {
        s1[i] = s2[i];
    }

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncpy(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int num_2 = tj_strlen(s2);

    int my_len = len < num_2 ? len : num_2;

    for (int i = 0; i < my_len; i++) {
        s1[i] = s2[i];
    }

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;

    while (s1[i] == s2[i] && s1[i] != '\0' && s2[i] != '\0') {
        i++;
    }

    return s1[i] - s2[i];


    //return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (1) {
        while (s1[i] == s2[i] && s1[i] != '\0' && s2[i] != '\0') {
            i++;
        }

        if (s1[i] == '\0' && s2[i] == '\0')
            return 0;

        char ch_1 = s1[i] < s2[i] ? s1[i] : s2[i];  //小的 大写字母
        char ch_2 = s1[i] < s2[i] ? s2[i] : s1[i];  //大的 小写字母
        if (ch_1 <= 'Z' && ch_1 >= 'A' && ch_2 <= 'z' && ch_2 >= 'a' 
            && ch_1 - 'A' == ch_2 - 'a') {
            i++;
        }
        else {
            ch_1 = s1[i];
            ch_2 = s2[i];
            if (ch_1 <= 'Z' && ch_1 >= 'A')
                ch_1 += 'a' - 'A';
            if (ch_2 <= 'Z' && ch_2 >= 'A')
                ch_2 += 'a' - 'A';
            return ch_1 - ch_2;
        }
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    //原题表达有歧义  若 len 大于 s1/s2 中长度短的串，则比较
    //到短串的\0 即结束  \0参不参与比较？？？  下面按照\0参与比较来写
    int i = 0;
    int num_1 = tj_strlen(s1) + 1;
    int num_2 = tj_strlen(s2) + 1;

    int num = num_1 < num_2 ? num_1 : num_2;
    int my_len = len < num ? len : num;

    for (i = 0; i < my_len; i++) {
        if (s1[i] != s2[i])
            break;
    }

    if (i == my_len)
        return 0;
    else
        return s1[i] - s2[i];
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    int num_1 = tj_strlen(s1) + 1;
    int num_2 = tj_strlen(s2) + 1;

    int num = num_1 < num_2 ? num_1 : num_2;
    int my_len = len < num ? len : num;

    for (i = 0; i < my_len; i++) {
        if (s1[i] != s2[i]) {  //如果不相等
            char ch_1 = s1[i] < s2[i] ? s1[i] : s2[i];  //小的 大写字母
            char ch_2 = s1[i] < s2[i] ? s2[i] : s1[i];  //大的 小写字母
            if (ch_1 <= 'Z' && ch_1 >= 'A' && ch_2 <= 'z' && ch_2 >= 'a'
                && ch_1 - 'A' == ch_2 - 'a') {
                continue;
            }
            else {
                ch_1 = s1[i];
                ch_2 = s2[i];
                if (ch_1 <= 'Z' && ch_1 >= 'A')
                    ch_1 += 'a' - 'A';
                if (ch_2 <= 'Z' && ch_2 >= 'A')
                    ch_2 += 'a' - 'A';
                return ch_1 - ch_2;
            }
        }
    }

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strupr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (str[i] != '\0') {
        if (str[i] <= 'z' && str[i] >= 'a')
            str[i] -= 'a' - 'A';
        i++;
    }

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlwr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (str[i] != '\0') {
        if (str[i] <= 'Z' && str[i] >= 'A')
            str[i] += 'a' - 'A';
        i++;
    }

    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char str[], char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (str[i] != '\0' && str[i] != ch) {
        i++;
    }

    if (str[i] == ch)
        return i + 1;
    else
        return 0;

}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    int j = 0;
    while (str[i] != '\0' && substr[j] != '\0') {
        if (str[i] == substr[j]) {
            j++;
            i++;
        }
        else {
            i = i - j + 1;
            j = 0;
        }
    }

    if (substr[j] == '\0')
        return i - tj_strlen(substr) + 1;
    else
        return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char str[], const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i;
    for (i = tj_strlen(str) - 1; i >= 0; i--) {
        if (str[i] == ch)
            break;
    }

    return i + 1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const int num_1 = tj_strlen(str);
    const int num_2 = tj_strlen(substr);
    int i = num_1 - 1;
    int j = num_2 - 1;

    while (i >= 0 && j >= 0) {
        if (str[i] == substr[j]) {
            j--;
            i--;
        }
        else {
            i = i + num_2 - j - 2;
            j = num_2 - 1;
        }
    }

    if (j == -1)
        return i + 2;
    else
        return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrev(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len = tj_strlen(str);
    for (int i = 0; i < len / 2; i++) {
        int temp = str[i];
        str[i] = str[len - 1 - i];
        str[len - 1 - i] = temp;
    }

    return 0; //return值可根据需要修改
}
